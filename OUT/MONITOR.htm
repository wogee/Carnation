<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OUT\MONITOR.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OUT\MONITOR.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Dec 04 17:47:49 2020
<BR><P>
<H3>Maximum Stack Usage =       8788 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; RecordInit &rArr; ChargingRecordInit &rArr; InsertChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[45]">OS_ENTER_CRITICAL</a>
 <LI><a href="#[44]">OS_EXIT_CRITICAL</a>
 <LI><a href="#[1d6]">OSStartHighRdy</a>
 <LI><a href="#[1dc]">OSCtxSw</a>
 <LI><a href="#[1cb]">OSIntCtxSw</a>
 <LI><a href="#[e]">PendSV_Handler</a>
 <LI><a href="#[293]">intDisAll</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
 <LI><a href="#[c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SVC_Handler</a><BR>
 <LI><a href="#[d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DebugMon_Handler</a><BR>
 <LI><a href="#[26]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[27]">BOD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[32]">CANActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[29]">CAN_IRQHandler</a> from can.o(i.CAN_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[4e]">CardTask</a> from cardtask.o(i.CardTask) referenced from app.o(i.main)
 <LI><a href="#[4a]">ChargeTask</a> from chginterface.o(i.ChargeTask) referenced from app.o(i.main)
 <LI><a href="#[2a]">DMA_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[22]">EINT0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[23]">EINT1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[24]">EINT2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[25]">EINT3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2c]">ENET_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[4d]">ElmTask</a> from elmtask.o(i.ElmTask) referenced from app.o(i.main)
 <LI><a href="#[36]">GPIO_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1a]">I2C0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1b]">I2C1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1c]">I2C2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2b]">I2S_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[38]">KFLASH_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[35]">LCD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2d]">MCI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2e]">MCPWM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[49]">MainTask</a> from maintask.o(i.MainTask) referenced from app.o(i.main)
 <LI><a href="#[9]">MemManage_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[4c]">NetTask</a> from nettask.o(i.NetTask) referenced from app.o(i.main)
 <LI><a href="#[3f]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(UCOSII_ASM)
 <LI><a href="#[45]">OS_ENTER_CRITICAL</a> from os_cpu_a.o(UCOSII_ASM) referenced from ethernet.o(i.EthInit)
 <LI><a href="#[44]">OS_EXIT_CRITICAL</a> from os_cpu_a.o(UCOSII_ASM) referenced from ethernet.o(i.EthInit)
 <LI><a href="#[46]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[47]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[20]">PLL0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[30]">PLL1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[37]">PWM0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[19]">PWM1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from os_cpu_a.o(UCOSII_ASM) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2f]">QEI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1d]">SPIFI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[43]">SPI_RecvByte</a> from ethernet.o(i.SPI_RecvByte) referenced from ethernet.o(i.EthInit)
 <LI><a href="#[42]">SPI_SendByte</a> from ethernet.o(i.SPI_SendByte) referenced from ethernet.o(i.EthInit)
 <LI><a href="#[1e]">SSP0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1f]">SSP1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[34]">SSP2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from os_cpu_c.o(i.SysTick_Handler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[11]">TIMER0_IRQHandler</a> from timer.o(i.TIMER0_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[12]">TIMER1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[13]">TIMER2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[14]">TIMER3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[4b]">TaskProtocolHandle</a> from protocol.o(i.TaskProtocolHandle) referenced from app.o(i.main)
 <LI><a href="#[15]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[16]">UART1_IRQHandler</a> from uart.o(i.UART1_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[17]">UART2_IRQHandler</a> from uart.o(i.UART2_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[18]">UART3_IRQHandler</a> from uart.o(i.UART3_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[33]">UART4_IRQHandler</a> from uart.o(i.UART4_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[31]">USBActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[28]">USB_IRQHandler</a> from lpc177x_8x_usbhost.o(i.USB_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[40]">W5500_CS_Deselect</a> from ethernet.o(i.W5500_CS_Deselect) referenced from ethernet.o(i.EthInit)
 <LI><a href="#[41]">W5500_CS_Select</a> from ethernet.o(i.W5500_CS_Select) referenced from ethernet.o(i.EthInit)
 <LI><a href="#[10]">WDT_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[3c]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3d]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[3b]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[48]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[3e]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[39]">main</a> from app.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4]">wizchip_bus_readdata</a> from wizchip_conf.o(i.wizchip_bus_readdata) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[5]">wizchip_bus_writedata</a> from wizchip_conf.o(i.wizchip_bus_writedata) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[0]">wizchip_cris_enter</a> from wizchip_conf.o(i.wizchip_cris_enter) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[0]">wizchip_cris_enter</a> from wizchip_conf.o(i.wizchip_cris_enter) referenced from wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
 <LI><a href="#[1]">wizchip_cris_exit</a> from wizchip_conf.o(i.wizchip_cris_exit) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[1]">wizchip_cris_exit</a> from wizchip_conf.o(i.wizchip_cris_exit) referenced from wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
 <LI><a href="#[3]">wizchip_cs_deselect</a> from wizchip_conf.o(i.wizchip_cs_deselect) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[3]">wizchip_cs_deselect</a> from wizchip_conf.o(i.wizchip_cs_deselect) referenced from wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
 <LI><a href="#[2]">wizchip_cs_select</a> from wizchip_conf.o(i.wizchip_cs_select) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[2]">wizchip_cs_select</a> from wizchip_conf.o(i.wizchip_cs_select) referenced from wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
 <LI><a href="#[4f]">wizchip_spi_readbyte</a> from wizchip_conf.o(i.wizchip_spi_readbyte) referenced from wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
 <LI><a href="#[50]">wizchip_spi_writebyte</a> from wizchip_conf.o(i.wizchip_spi_writebyte) referenced from wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[284]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[51]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[64]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[285]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[286]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[287]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[288]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[289]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>KFLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32tobcdnomstr1
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetQRCode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargingRecord
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchInfo
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMainCharge
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecord
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD7
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD5
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1003
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmSenddRv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetQRCode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetPileNo
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetManufactureBase
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetHardVersion
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetActCode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAPNUser
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAPNPasswd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAPN
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetManufactureBase
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetHardVersion
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetActCode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetAPNUser
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetAPNPasswd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetAPN
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEXT_CCBInfo
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_update
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD8
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD102
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSenddRv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTMakeMsg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTCheckMsg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthSend
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_encrypt
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_decrypt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromCCB
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiFramePackAndSend
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeStatus
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[28a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmProc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigProtocolFrameCheck
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_update
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[28b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaDefault
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargingRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChargingRecord
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingRecordInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecordInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAllRecord
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaDefault
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decryption
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRDClearInput
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVerifySuccesInfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUpdataInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUnLockFailureInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartDeviceInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartChgInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRemainMoneyInfo
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordMoreInfo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordInfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAccount
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopInfo
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBStopInfo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBIdleInfo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBChgInfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBStopInfo
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBChgInfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBStopInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBIdleInfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBChgInfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChargeInfo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromDebugPlatform
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardPro
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeErrInfo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardRecordInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmRead
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmSenddRv
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcKey
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAllRecord
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInfoDefault
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetActCode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigProtocolFrameCheck
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Draw_Ioc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSenddRv
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsProc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCon_
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b3]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[202]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD5
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD8
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD102
</UL>

<P><STRONG><a name="[a3]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardPro
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcKey
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetActCode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsProc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCon_
</UL>

<P><STRONG><a name="[ca]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecord
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetActCode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigProtocolFrameCheck
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
</UL>

<P><STRONG><a name="[58]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUserInputChargeTypeAndAssistPowerType
</UL>

<P><STRONG><a name="[5a]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[5c]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetActCode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[59]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[3b]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[52]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[28e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[28f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[290]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[63]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[291]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>OS_ENTER_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_update
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_update
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_update
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.EthInit)
</UL>
<P><STRONG><a name="[44]"></a>OS_EXIT_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_update
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_update
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_update
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.EthInit)
</UL>
<P><STRONG><a name="[1d6]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[1dc]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1cb]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; sysTickInit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[293]"></a>intDisAll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM), UNUSED)

<P><STRONG><a name="[66]"></a>AES_ECB_decrypt</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, libaes.o(i.AES_ECB_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AES_ECB_decrypt &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[6a]"></a>AES_ECB_encrypt</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, libaes.o(i.AES_ECB_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AES_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt
</UL>

<P><STRONG><a name="[6f]"></a>AnalyseMsgFromCCB</STRONG> (Thumb, 1272 bytes, Stack size 32 bytes, ext_chgtask.o(i.AnalyseMsgFromCCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = AnalyseMsgFromCCB &rArr; SendPF33 &rArr; SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParaResult
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRead
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF33
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF31
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgHandle
</UL>

<P><STRONG><a name="[75]"></a>AnalyseMsgFromDebugPlatform</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, para.o(i.AnalyseMsgFromDebugPlatform))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = AnalyseMsgFromDebugPlatform &rArr; DebugPlatformWriteDataAnalyse &rArr; ParaSetServerIp &rArr; DeleteAllRecord &rArr; f_mkfs &rArr; disk_initialize &rArr; MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigProtocolFrameCheck
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[7f]"></a>AnalyseMsgFromUdpPlatform</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, ethernet.o(i.AnalyseMsgFromUdpPlatform))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = AnalyseMsgFromUdpPlatform &rArr; DebugPlatformWriteDataAnalyse &rArr; ParaSetServerIp &rArr; DeleteAllRecord &rArr; f_mkfs &rArr; disk_initialize &rArr; MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigProtocolFrameCheck
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[212]"></a>Bcd32ToHex32</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, myalglib.o(i.Bcd32ToHex32))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
</UL>

<P><STRONG><a name="[236]"></a>BoardGetMaxCurrent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.BoardGetMaxCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPara
</UL>

<P><STRONG><a name="[234]"></a>BoardGetModuleType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.BoardGetModuleType))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPara
</UL>

<P><STRONG><a name="[235]"></a>BoardGetMoudleNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.BoardGetMoudleNum))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPara
</UL>

<P><STRONG><a name="[237]"></a>BoardGetPowerMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.BoardGetPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPara
</UL>

<P><STRONG><a name="[8a]"></a>BoardInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, board.o(i.BoardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BoardInit &rArr; CANInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetDir
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DwinInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>BoardRunLedControl</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, maintask.o(i.BoardRunLedControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BoardRunLedControl &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedRunOn
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedRunOff
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[93]"></a>BuzzerInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, buzzer.o(i.BuzzerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BuzzerInit &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[89]"></a>BuzzerOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buzzer.o(i.BuzzerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BuzzerOff &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>

<P><STRONG><a name="[87]"></a>BuzzerOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buzzer.o(i.BuzzerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BuzzerOn &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>

<P><STRONG><a name="[8e]"></a>CANInit</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, can.o(i.CANInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[71]"></a>CANRead</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, can.o(i.CANRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CANRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromCCB
</UL>

<P><STRONG><a name="[231]"></a>CANWrite</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, can.o(i.CANWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToCCB
</UL>

<P><STRONG><a name="[29]"></a>CAN_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, can.o(i.CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>CalcKey</STRONG> (Thumb, 148 bytes, Stack size 184 bytes, encrypt.o(i.CalcKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = CalcKey &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardProc
</UL>

<P><STRONG><a name="[ac]"></a>CardGetId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cardtask.o(i.CardGetId))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSetPileNumberAndLock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSetMoneyAndUnlock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[1e3]"></a>CardGetLockState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cardtask.o(i.CardGetLockState))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[1e2]"></a>CardGetMoney</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cardtask.o(i.CardGetMoney))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[19d]"></a>CardGetPileNumber</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cardtask.o(i.CardGetPileNumber))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
</UL>

<P><STRONG><a name="[1e1]"></a>CardGetState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cardtask.o(i.CardGetState))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[1e4]"></a>CardGetType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cardtask.o(i.CardGetType))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[ab]"></a>CardSetMoneyAndUnlock</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cardtask.o(i.CardSetMoneyAndUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CardSetMoneyAndUnlock &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockCardPro
</UL>

<P><STRONG><a name="[ad]"></a>CardSetPileNumberAndLock</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cardtask.o(i.CardSetPileNumberAndLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CardSetPileNumberAndLock &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardPro
</UL>

<P><STRONG><a name="[4e]"></a>CardTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cardtask.o(i.CardTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = CardTask &rArr; CardProc &rArr; MTWrite &rArr; MTSenddRv &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[b5]"></a>ChargeRecordInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, record.o(i.ChargeRecordInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = ChargeRecordInit &rArr; OSMutexPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInit
</UL>

<P><STRONG><a name="[4a]"></a>ChargeTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, chginterface.o(i.ChargeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ChargeTask &rArr; ChgHandle &rArr; SendPF35 &rArr; MultiFramePackAndSend &rArr; SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[ba]"></a>ChargingRecordInit</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, record.o(i.ChargingRecordInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4588 + Unknown Stack Size
<LI>Call Chain = ChargingRecordInit &rArr; InsertChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInit
</UL>

<P><STRONG><a name="[b9]"></a>ChgHandle</STRONG> (Thumb, 968 bytes, Stack size 8 bytes, ext_chgtask.o(i.ChgHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ChgHandle &rArr; SendPF35 &rArr; MultiFramePackAndSend &rArr; SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParaCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParaCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF35
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF32
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF30
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromCCB
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPara
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeTask
</UL>

<P><STRONG><a name="[238]"></a>ClearParaCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, para.o(i.ClearParaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPara
</UL>

<P><STRONG><a name="[78]"></a>ConfigProtocolFrameCheck</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, para.o(i.ConfigProtocolFrameCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigProtocolFrameCheck &rArr; ParaGetPileNo
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromDebugPlatform
</UL>

<P><STRONG><a name="[79]"></a>DebugPlatformReadDataAnalyse</STRONG> (Thumb, 2246 bytes, Stack size 600 bytes, para.o(i.DebugPlatformReadDataAnalyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = DebugPlatformReadDataAnalyse &rArr; UDPSend &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRead
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetQRCode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetFeilvTime
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetFeilvMoney
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleSoc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleCur
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSend
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPowerMod
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMoudlenum
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModuletype
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMaxcurrent
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetUpChannel
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetTestWorker
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetSubMask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetServerPort
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetServerIp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetScreenTime
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPhyMac
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetNetHeartTime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetManufactureDate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetManufactureBase
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetLocalIp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetLifeTime
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetHardVersion
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetGateWay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetDCMeterAddr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetCustomerNumber
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetActCode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetAPNUser
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetAPNPasswd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetAPN
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetACMeterAddr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromDebugPlatform
</UL>

<P><STRONG><a name="[7a]"></a>DebugPlatformWriteDataAnalyse</STRONG> (Thumb, 1664 bytes, Stack size 488 bytes, para.o(i.DebugPlatformWriteDataAnalyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = DebugPlatformWriteDataAnalyse &rArr; ParaSetServerIp &rArr; DeleteAllRecord &rArr; f_mkfs &rArr; disk_initialize &rArr; MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcWrite
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAllRecord
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrickleSoc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrickleCur
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetUpChannel
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetTestWorker
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetSubMask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetServerPort
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetServerIp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetScreenTime
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetQRCode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetPileNo
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetPhyMac
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetNetHeartTime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetManufactureDate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetManufactureBase
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetLocalIp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetLifeTime
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetHardVersion
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetGateWay
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetFeilvTime
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetFeilvMoney
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDCMeterAddr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCustomerNumber
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetChgGunNumber
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetActCode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAPNUser
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAPNPasswd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAPN
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetACMeterAddr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetScreenTime
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromDebugPlatform
</UL>

<P><STRONG><a name="[108]"></a>Decrypt</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, encrypt.o(i.Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Decrypt &rArr; AES_ECB_decrypt &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTRead
</UL>

<P><STRONG><a name="[109]"></a>Decryption</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, myalglib.o(i.Decryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Decryption &rArr; HexstrToDec
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexstrToDec
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetActCode
</UL>

<P><STRONG><a name="[10b]"></a>DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = DelayMs &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Write
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmSenddRv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSenddRv
</UL>

<P><STRONG><a name="[f3]"></a>DeleteAllRecord</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, record.o(i.DeleteAllRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = DeleteAllRecord &rArr; f_mkfs &rArr; disk_initialize &rArr; MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetServerIp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[10f]"></a>DeleteChargingRecord</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, record.o(i.DeleteChargingRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = DeleteChargingRecord &rArr; OSMutexPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[110]"></a>DeleteLockCardRecord</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, record.o(i.DeleteLockCardRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = DeleteLockCardRecord &rArr; OSMutexPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
</UL>

<P><STRONG><a name="[111]"></a>DispAChargeInfo</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, display.o(i.DispAChargeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = DispAChargeInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[114]"></a>DispAChgBChgInfo</STRONG> (Thumb, 630 bytes, Stack size 112 bytes, display.o(i.DispAChgBChgInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = DispAChgBChgInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
</UL>

<P><STRONG><a name="[115]"></a>DispAChgBIdleInfo</STRONG> (Thumb, 330 bytes, Stack size 96 bytes, display.o(i.DispAChgBIdleInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = DispAChgBIdleInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Draw_Ioc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
</UL>

<P><STRONG><a name="[117]"></a>DispAChgBStopInfo</STRONG> (Thumb, 416 bytes, Stack size 104 bytes, display.o(i.DispAChgBStopInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = DispAChgBStopInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
</UL>

<P><STRONG><a name="[118]"></a>DispAIdleBChgInfo</STRONG> (Thumb, 346 bytes, Stack size 120 bytes, display.o(i.DispAIdleBChgInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = DispAIdleBChgInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Draw_Ioc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
</UL>

<P><STRONG><a name="[119]"></a>DispAIdleBIdleInfo</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, display.o(i.DispAIdleBIdleInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = DispAIdleBIdleInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Draw_Ioc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
</UL>

<P><STRONG><a name="[11a]"></a>DispAIdleBStopInfo</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, display.o(i.DispAIdleBStopInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = DispAIdleBStopInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Draw_Ioc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
</UL>

<P><STRONG><a name="[11b]"></a>DispAIdleInfo</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, display.o(i.DispAIdleInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = DispAIdleInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Draw_Ioc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[11c]"></a>DispAStopBChgInfo</STRONG> (Thumb, 444 bytes, Stack size 128 bytes, display.o(i.DispAStopBChgInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = DispAStopBChgInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
</UL>

<P><STRONG><a name="[11d]"></a>DispAStopBIdleInfo</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, display.o(i.DispAStopBIdleInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = DispAStopBIdleInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Draw_Ioc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
</UL>

<P><STRONG><a name="[11e]"></a>DispAStopBStopInfo</STRONG> (Thumb, 238 bytes, Stack size 96 bytes, display.o(i.DispAStopBStopInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = DispAStopBStopInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
</UL>

<P><STRONG><a name="[11f]"></a>DispAStopInfo</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, display.o(i.DispAStopInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = DispAStopInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[120]"></a>DispAccount</STRONG> (Thumb, 218 bytes, Stack size 176 bytes, display.o(i.DispAccount))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = DispAccount &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
</UL>

<P><STRONG><a name="[121]"></a>DispCardLockInfo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(i.DispCardLockInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = DispCardLockInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
</UL>

<P><STRONG><a name="[122]"></a>DispDeviceFault</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(i.DispDeviceFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = DispDeviceFault &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[123]"></a>DispErrIdGunInfo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, display.o(i.DispErrIdGunInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = DispErrIdGunInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeErrInfo
</UL>

<P><STRONG><a name="[124]"></a>DispInVerify</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, display.o(i.DispInVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = DispInVerify &rArr; XRD_Load_Page &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnlineCardInfo
</UL>

<P><STRONG><a name="[125]"></a>DispInsertGunInfo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, display.o(i.DispInsertGunInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = DispInsertGunInfo &rArr; XRD_Load_Page &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[126]"></a>DispMenuInfo</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, display.o(i.DispMenuInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = DispMenuInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
</UL>

<P><STRONG><a name="[128]"></a>DispNoPileUsed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, display.o(i.DispNoPileUsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = DispNoPileUsed &rArr; XRD_Load_Page &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[129]"></a>DispOperationInfo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, display.o(i.DispOperationInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = DispOperationInfo &rArr; XRD_Load_Page &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockCardPro
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardPro
</UL>

<P><STRONG><a name="[12a]"></a>DispRecordInfo</STRONG> (Thumb, 384 bytes, Stack size 128 bytes, display.o(i.DispRecordInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = DispRecordInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32tobcdnomstr1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
</UL>

<P><STRONG><a name="[12c]"></a>DispRecordMoreInfo</STRONG> (Thumb, 590 bytes, Stack size 128 bytes, display.o(i.DispRecordMoreInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = DispRecordMoreInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32tobcdnomstr1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
</UL>

<P><STRONG><a name="[12d]"></a>DispRecordNullInfo</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, display.o(i.DispRecordNullInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = DispRecordNullInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
</UL>

<P><STRONG><a name="[12e]"></a>DispRemainMoneyInfo</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, display.o(i.DispRemainMoneyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = DispRemainMoneyInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
</UL>

<P><STRONG><a name="[12f]"></a>DispStartChgInfo</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, display.o(i.DispStartChgInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = DispStartChgInfo &rArr; XRD_Load_Page &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[130]"></a>DispStartDeviceInfo</STRONG> (Thumb, 142 bytes, Stack size 96 bytes, display.o(i.DispStartDeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = DispStartDeviceInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetRunHour
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetLimitHour
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[133]"></a>DispStartFailureInfo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, display.o(i.DispStartFailureInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = DispStartFailureInfo &rArr; XRD_Load_Page &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[134]"></a>DispUnLockFailureInfo</STRONG> (Thumb, 46 bytes, Stack size 64 bytes, display.o(i.DispUnLockFailureInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = DispUnLockFailureInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
</UL>

<P><STRONG><a name="[135]"></a>DispUpdataInfo</STRONG> (Thumb, 60 bytes, Stack size 72 bytes, display.o(i.DispUpdataInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = DispUpdataInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[136]"></a>DispVerifyFailure</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(i.DispVerifyFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = DispVerifyFailure &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnlineCardInfo
</UL>

<P><STRONG><a name="[137]"></a>DispVerifySuccesInfo</STRONG> (Thumb, 60 bytes, Stack size 72 bytes, display.o(i.DispVerifySuccesInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = DispVerifySuccesInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
</UL>

<P><STRONG><a name="[94]"></a>DwinInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dwin.o(i.DwinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DwinInit &rArr; UartInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[138]"></a>EXT_StartCharge</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ext_chgtask.o(i.EXT_StartCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = EXT_StartCharge &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharge
</UL>

<P><STRONG><a name="[139]"></a>EXT_StopCharge</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ext_chgtask.o(i.EXT_StopCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = EXT_StopCharge &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharge
</UL>

<P><STRONG><a name="[1ee]"></a>EepromErase</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, eeprom.o(i.EepromErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EepromErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
</UL>

<P><STRONG><a name="[95]"></a>EepromInit</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, eeprom.o(i.EepromInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[173]"></a>EepromRead</STRONG> (Thumb, 318 bytes, Stack size 28 bytes, eeprom.o(i.EepromRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTrickleInfo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdata
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
</UL>

<P><STRONG><a name="[b1]"></a>EepromWrite</STRONG> (Thumb, 370 bytes, Stack size 28 bytes, eeprom.o(i.EepromWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EepromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTrickleInfo
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgSave
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSavaRunHour
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrickleSoc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrickleInfo
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrickleCur
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetActCode
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>

<P><STRONG><a name="[c8]"></a>ElmGetCommState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, elmtask.o(i.ElmGetCommState))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeErrInfo
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConditionStop
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[233]"></a>ElmGetCurA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, elmtask.o(i.ElmGetCurA))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF35
</UL>

<P><STRONG><a name="[240]"></a>ElmGetCurB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, elmtask.o(i.ElmGetCurB))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
</UL>

<P><STRONG><a name="[241]"></a>ElmGetCurC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, elmtask.o(i.ElmGetCurC))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
</UL>

<P><STRONG><a name="[182]"></a>ElmGetTotalElc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, elmtask.o(i.ElmGetTotalElc))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
</UL>

<P><STRONG><a name="[232]"></a>ElmGetVolA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, elmtask.o(i.ElmGetVolA))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF35
</UL>

<P><STRONG><a name="[23e]"></a>ElmGetVolB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, elmtask.o(i.ElmGetVolB))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
</UL>

<P><STRONG><a name="[23f]"></a>ElmGetVolC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, elmtask.o(i.ElmGetVolC))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
</UL>

<P><STRONG><a name="[13f]"></a>ElmRead</STRONG> (Thumb, 434 bytes, Stack size 304 bytes, elmtask.o(i.ElmRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = ElmRead &rArr; ElmSenddRv &rArr; RS485Write &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mylbcdstr2hex
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mybcd2hex
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmSenddRv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmMakeMsg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmReadData
</UL>

<P><STRONG><a name="[4d]"></a>ElmTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, elmtask.o(i.ElmTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = ElmTask &rArr; ElmProc &rArr; ElmReadData &rArr; ElmRead &rArr; ElmSenddRv &rArr; RS485Write &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmProc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[147]"></a>Encrypt</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, encrypt.o(i.Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Encrypt &rArr; AES_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTWrite
</UL>

<P><STRONG><a name="[148]"></a>EthConn</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ethernet.o(i.EthConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = EthConn &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConn
</UL>

<P><STRONG><a name="[149]"></a>EthHandle</STRONG> (Thumb, 578 bytes, Stack size 1056 bytes, ethernet.o(i.EthHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = EthHandle &rArr; EthInit &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
</UL>

<P><STRONG><a name="[14b]"></a>EthInit</STRONG> (Thumb, 248 bytes, Stack size 88 bytes, ethernet.o(i.EthInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = EthInit &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetSubMask
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPhyMac
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetLocalIp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetGateWay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetDir
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spi_cbfunc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cs_cbfunc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cris_cbfunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>

<P><STRONG><a name="[1bb]"></a>EthRecv</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, ethernet.o(i.EthRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EthRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRecv
</UL>

<P><STRONG><a name="[153]"></a>EthSend</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ethernet.o(i.EthSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = EthSend &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
</UL>

<P><STRONG><a name="[154]"></a>Fill_MSCommand</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, usbhost_ms.o(i.Fill_MSCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE32U
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE32U
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[158]"></a>FindChargeRecord</STRONG> (Thumb, 150 bytes, Stack size 4184 bytes, record.o(i.FindChargeRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 4564 + Unknown Stack Size
<LI>Call Chain = FindChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportChargeRecord
</UL>

<P><STRONG><a name="[19e]"></a>FindLockCardRecord</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, record.o(i.FindLockCardRecord))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
</UL>

<P><STRONG><a name="[91]"></a>FramInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fram.o(i.FramInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FramInit &rArr; FramDisable &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramDisable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[b7]"></a>FramRead</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, fram.o(i.FramRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FramRead &rArr; FramEnable &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteByte
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tdelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardRecordInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingRecordInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecordInit
</UL>

<P><STRONG><a name="[bc]"></a>FramWrite</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, fram.o(i.FramWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FramWrite &rArr; FramEnable &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteByte
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tdelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLockCardRecord
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargingRecord
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLockCardRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChargingRecord
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingRecordInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAllRecord
</UL>

<P><STRONG><a name="[162]"></a>GPRSInit</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, gprs.o(i.GPRSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GPRSInit &rArr; GPRS_SendCmd &rArr; GprsReadSocket &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartFlush
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsProc
</UL>

<P><STRONG><a name="[168]"></a>GetChargeRecord</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, maintask.o(i.GetChargeRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetChargeRecord &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportChargeRecord
</UL>

<P><STRONG><a name="[19f]"></a>GetChargeRecordIndex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, record.o(i.GetChargeRecordIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportChargeRecord
</UL>

<P><STRONG><a name="[1fe]"></a>GetChargeRecordNumber</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, record.o(i.GetChargeRecordNumber))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportChargeRecord
</UL>

<P><STRONG><a name="[b3]"></a>GetChgInfo</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, chginterface.o(i.GetChgInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetChgInfo &rArr; GetEXT_CCBInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEXT_CCBInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeStatus
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[226]"></a>GetCurrent</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, maintask.o(i.GetCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[169]"></a>GetEXT_CCBInfo</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ext_chgtask.o(i.GetEXT_CCBInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetEXT_CCBInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChgInfo
</UL>

<P><STRONG><a name="[16e]"></a>GetEXT_StopCause</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ext_chgtask.o(i.GetEXT_StopCause))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStopCause
</UL>

<P><STRONG><a name="[222]"></a>GetLifeTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, maintask.o(i.GetLifeTime))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[16a]"></a>GetMainCharge</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, maintask.o(i.GetMainCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetMainCharge
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1001
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSendCMD702
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[239]"></a>GetOnlineState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, protocol.o(i.GetOnlineState))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
</UL>

<P><STRONG><a name="[bf]"></a>GetParaCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.GetParaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgHandle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPara
</UL>

<P><STRONG><a name="[22e]"></a>GetStartCardID</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, maintask.o(i.GetStartCardID))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[22f]"></a>GetStartDateTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, maintask.o(i.GetStartDateTime))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[229]"></a>GetStartMeterEnergy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, maintask.o(i.GetStartMeterEnergy))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[22c]"></a>GetStartMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, maintask.o(i.GetStartMode))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[22d]"></a>GetStartPara</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, maintask.o(i.GetStartPara))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[22b]"></a>GetStartType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, maintask.o(i.GetStartType))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[223]"></a>GetStartingChg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, maintask.o(i.GetStartingChg))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[16d]"></a>GetStopCause</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chginterface.o(i.GetStopCause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetStopCause
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEXT_StopCause
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[22a]"></a>GetStopMeterEnergy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, maintask.o(i.GetStopMeterEnergy))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[228]"></a>GetSumEnergy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, maintask.o(i.GetSumEnergy))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[224]"></a>GetSumMoney</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, maintask.o(i.GetSumMoney))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[227]"></a>GetSumTime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, maintask.o(i.GetSumTime))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[16f]"></a>GetTouchInfo</STRONG> (Thumb, 382 bytes, Stack size 536 bytes, xrd.o(i.GetTouchInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = GetTouchInfo &rArr; UartRead
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverLcdbuf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdReadbuf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUserInputChargeTypeAndAssistPowerType
</UL>

<P><STRONG><a name="[e2]"></a>GetTrickleCur</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.GetTrickleCur))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrickleCtrl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD604
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD602
</UL>

<P><STRONG><a name="[230]"></a>GetTrickleMin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.GetTrickleMin))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrickleCtrl
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD604
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD602
</UL>

<P><STRONG><a name="[e3]"></a>GetTrickleSoc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.GetTrickleSoc))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrickleCtrl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD604
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD602
</UL>

<P><STRONG><a name="[172]"></a>GetUpdata</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, para.o(i.GetUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetUpdata &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[174]"></a>GetUpdataPre</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, protocol.o(i.GetUpdataPre))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUpdataPre
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[225]"></a>GetVoltage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, maintask.o(i.GetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[96]"></a>GpioSetDir</STRONG> (Thumb, 474 bytes, Stack size 12 bytes, gpio.o(i.GpioSetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GpioSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramDisable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
</UL>

<P><STRONG><a name="[9b]"></a>GpioSetLev</STRONG> (Thumb, 270 bytes, Stack size 12 bytes, gpio.o(i.GpioSetLev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgFeed
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRelayState
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedWarnOn
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedWarnOff
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedRunOn
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedRunOff
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPwrOn
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPwrOff
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedChargeOn
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedChargeOff
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOff
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramDisable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_CS_Select
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_CS_Deselect
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WRSR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WREN
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SE
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_READ
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_RDSR
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PP
</UL>

<P><STRONG><a name="[1ba]"></a>GprsCon</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gprs.o(i.GprsCon))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GprsCon
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConn
</UL>

<P><STRONG><a name="[178]"></a>GprsProc</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, gprs.o(i.GprsProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = GprsProc &rArr; GprsCon_ &rArr; GPRS_SendCmd &rArr; GprsReadSocket &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCon_
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
</UL>

<P><STRONG><a name="[1bc]"></a>GprsRecv</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, gprs.o(i.GprsRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GprsRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRecv
</UL>

<P><STRONG><a name="[17b]"></a>GprsSend</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gprs.o(i.GprsSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = GprsSend &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
</UL>

<P><STRONG><a name="[211]"></a>Hex32ToBcd32</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, myalglib.o(i.Hex32ToBcd32))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[10a]"></a>HexstrToDec</STRONG> (Thumb, 84 bytes, Stack size 36 bytes, myalglib.o(i.HexstrToDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HexstrToDec
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decryption
</UL>

<P><STRONG><a name="[17c]"></a>Host_CtrlRecv</STRONG> (Thumb, 96 bytes, Stack size 36 bytes, lpc177x_8x_usbhost.o(i.Host_CtrlRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
</UL>

<P><STRONG><a name="[17d]"></a>Host_FillSetup</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, lpc177x_8x_usbhost.o(i.Host_FillSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>

<P><STRONG><a name="[17e]"></a>Host_ProcessTD</STRONG> (Thumb, 220 bytes, Stack size 28 bytes, lpc177x_8x_usbhost.o(i.Host_ProcessTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WDHWait
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[180]"></a>Host_WDHWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_WDHWait))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>

<P><STRONG><a name="[bb]"></a>InsertChargeRecord</STRONG> (Thumb, 298 bytes, Stack size 4176 bytes, record.o(i.InsertChargeRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 4556 + Unknown Stack Size
<LI>Call Chain = InsertChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingRecordInit
</UL>

<P><STRONG><a name="[185]"></a>InsertChargingRecord</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, record.o(i.InsertChargingRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = InsertChargingRecord &rArr; OSMutexPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[186]"></a>InsertLockCardRecord</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, record.o(i.InsertLockCardRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = InsertLockCardRecord &rArr; OSMutexPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardPro
</UL>

<P><STRONG><a name="[192]"></a>LEDBoardControl</STRONG> (Thumb, 668 bytes, Stack size 16 bytes, maintask.o(i.LEDBoardControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LEDBoardControl &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRelayState
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedWarnOn
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedWarnOff
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPwrOn
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPwrOff
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedChargeOn
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedChargeOff
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[199]"></a>LedChargeOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LedChargeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedChargeOff &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
</UL>

<P><STRONG><a name="[195]"></a>LedChargeOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LedChargeOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedChargeOn &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
</UL>

<P><STRONG><a name="[8f]"></a>LedInit</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, led.o(i.LedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedInit &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[197]"></a>LedPwrOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LedPwrOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedPwrOff &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
</UL>

<P><STRONG><a name="[196]"></a>LedPwrOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LedPwrOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedPwrOn &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
</UL>

<P><STRONG><a name="[9a]"></a>LedRunOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(i.LedRunOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedRunOff &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardRunLedControl
</UL>

<P><STRONG><a name="[99]"></a>LedRunOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(i.LedRunOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedRunOn &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardRunLedControl
</UL>

<P><STRONG><a name="[194]"></a>LedWarnOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LedWarnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedWarnOff &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
</UL>

<P><STRONG><a name="[198]"></a>LedWarnOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LedWarnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedWarnOn &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
</UL>

<P><STRONG><a name="[19b]"></a>LockCardRecordInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, record.o(i.LockCardRecordInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = LockCardRecordInit &rArr; OSMutexPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInit
</UL>

<P><STRONG><a name="[1a3]"></a>MD5Decode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, md5.o(i.MD5Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[1a1]"></a>MD5Encode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, md5.o(i.MD5Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MD5Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[a5]"></a>MD5Final</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, md5.o(i.MD5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcKey
</UL>

<P><STRONG><a name="[a2]"></a>MD5Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, md5.o(i.MD5Init))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcKey
</UL>

<P><STRONG><a name="[1a2]"></a>MD5Transform</STRONG> (Thumb, 1898 bytes, Stack size 284 bytes, md5.o(i.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[a4]"></a>MD5Update</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, md5.o(i.MD5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = MD5Update &rArr; MD5Transform &rArr; MD5Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcKey
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[1a4]"></a>MS_BulkRecv</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, usbhost_ms.o(i.MS_BulkRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1a5]"></a>MS_BulkSend</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, usbhost_ms.o(i.MS_BulkSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1a6]"></a>MS_GetMaxLUN</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_GetMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[1a7]"></a>MS_GetSenseInfo</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_GetSenseInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MS_GetSenseInfo &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[1a8]"></a>MS_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1ab]"></a>MS_Inquire</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_Inquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_Inquire &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[1aa]"></a>MS_ReadCapacity</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_ReadCapacity &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBE32U
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[1a9]"></a>MS_TestUnitReady</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MS_TestUnitReady &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[af]"></a>MTInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mt625.o(i.MTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MTInit &rArr; UartInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTask
</UL>

<P><STRONG><a name="[a9]"></a>MTRead</STRONG> (Thumb, 658 bytes, Stack size 296 bytes, mt625.o(i.MTRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = MTRead &rArr; MTSenddRv &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCrc8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSenddRv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTMakeMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardProc
</UL>

<P><STRONG><a name="[a7]"></a>MTSearch</STRONG> (Thumb, 74 bytes, Stack size 280 bytes, mt625.o(i.MTSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = MTSearch &rArr; MTSenddRv &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSenddRv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTMakeMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardProc
</UL>

<P><STRONG><a name="[aa]"></a>MTWrite</STRONG> (Thumb, 446 bytes, Stack size 320 bytes, mt625.o(i.MTWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = MTWrite &rArr; MTSenddRv &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCrc8
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSenddRv
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTMakeMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardProc
</UL>

<P><STRONG><a name="[49]"></a>MainTask</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, maintask.o(i.MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 5876 + Unknown Stack Size
<LI>Call Chain = MainTask &rArr; OneGunHandle &rArr; LockedCardHandle &rArr; FindChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgFeed
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpdataFlag
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetQRCode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdata
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUpdataInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartDeviceInfo
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromDebugPlatform
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardRunLedControl
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[1b1]"></a>MyCrc8</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, myalglib.o(i.MyCrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MyCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTWrite
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTRead
</UL>

<P><STRONG><a name="[13b]"></a>MyCum8Sum</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, myalglib.o(i.MyCum8Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MyCum8Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmMakeMsg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmCheckMsg
</UL>

<P><STRONG><a name="[1ae]"></a>MyXorSum</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, myalglib.o(i.MyXorSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MyXorSum
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTMakeMsg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTCheckMsg
</UL>

<P><STRONG><a name="[142]"></a>Mybcd2hex</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, myalglib.o(i.Mybcd2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mybcd2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mylbcdstr2hex
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmRead
</UL>

<P><STRONG><a name="[141]"></a>Mylbcdstr2hex</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, myalglib.o(i.Mylbcdstr2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Mylbcdstr2hex &rArr; Mybcd2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mybcd2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmRead
</UL>

<P><STRONG><a name="[1b9]"></a>NetConn</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nettask.o(i.NetConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = NetConn &rArr; EthConn &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCon
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthConn
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[7c]"></a>NetRecv</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nettask.o(i.NetRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = NetRecv &rArr; GprsRecv
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRecv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromMSA
</UL>

<P><STRONG><a name="[1bd]"></a>NetSend</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nettask.o(i.NetSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = NetSend &rArr; GprsSend &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthSend
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD5
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1103
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1101
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1009
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1007
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1005
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1003
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1001
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1011
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD8
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD702
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD604
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD602
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD102
</UL>

<P><STRONG><a name="[4c]"></a>NetTask</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, nettask.o(i.NetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = NetTask &rArr; EthHandle &rArr; EthInit &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetUpChannel
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsProc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[1be]"></a>OSInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bf]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c9]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ca]"></a>OSIntExit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1cc]"></a>OSMutexCreate</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, os_mutex.o(i.OSMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>OSMutexPend</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, os_mutex.o(i.OSMutexPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLockCardRecord
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargingRecord
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChargeRecord
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLockCardRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChargingRecord
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardRecordInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingRecordInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecordInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAllRecord
</UL>

<P><STRONG><a name="[b8]"></a>OSMutexPost</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, os_mutex.o(i.OSMutexPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLockCardRecord
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargingRecord
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChargeRecord
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLockCardRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChargingRecord
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardRecordInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingRecordInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecordInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAllRecord
</UL>

<P><STRONG><a name="[1d2]"></a>OSSemCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>OSSemPend</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
</UL>

<P><STRONG><a name="[1d4]"></a>OSSemPost</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
</UL>

<P><STRONG><a name="[1d5]"></a>OSStart</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dd]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1d7]"></a>OSTaskCreateExt</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[1de]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1df]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[1e0]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1d8]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[3f]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(UCOSII_ASM)
</UL>
<P><STRONG><a name="[10c]"></a>OSTimeDly</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[88]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyOnlineCardInfo
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSetPileNumberAndLock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSetMoneyAndUnlock
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardRunLedControl
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockCardPro
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardPro
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUserInputChargeTypeAndAssistPowerType
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnlineCardInfo
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskProtocolHandle
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeTask
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTask
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD5
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmReadData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_StopCharge
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_StartCharge
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1011
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSend
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthSend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthConn
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToCCB
</UL>

<P><STRONG><a name="[1da]"></a>OSTimeTick</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1db]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[1d0]"></a>OS_EventTO</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_core.o(i.OS_EventTO))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[1d1]"></a>OS_EventTaskRdy</STRONG> (Thumb, 184 bytes, Stack size 28 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[1ce]"></a>OS_EventTaskWait</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[1cd]"></a>OS_EventWaitListInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[1c4]"></a>OS_FlagInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c5]"></a>OS_MemInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c6]"></a>OS_QInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_QInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1cf]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[1d9]"></a>OS_TCBInit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[46]"></a>OS_TaskIdle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[47]"></a>OS_TaskStat</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[d0]"></a>ParaGetACMeterAddr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, para.o(i.ParaGetACMeterAddr))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[da]"></a>ParaGetAPN</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, para.o(i.ParaGetAPN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParaGetAPN
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[dc]"></a>ParaGetAPNPasswd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, para.o(i.ParaGetAPNPasswd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParaGetAPNPasswd
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[db]"></a>ParaGetAPNUser</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, para.o(i.ParaGetAPNUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParaGetAPNUser
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[e1]"></a>ParaGetActCode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, para.o(i.ParaGetActCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParaGetActCode
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[70]"></a>ParaGetChgGunNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.ParaGetChgGunNumber))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainCharge
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskProtocolHandle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeTask
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1001
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmProc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD8
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromCCB
</UL>

<P><STRONG><a name="[a8]"></a>ParaGetCustomerNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, para.o(i.ParaGetCustomerNumber))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardProc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[d1]"></a>ParaGetDCMeterAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, para.o(i.ParaGetDCMeterAddr))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmProc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[9f]"></a>ParaGetFeilvMoney</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, para.o(i.ParaGetFeilvMoney))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPeriodMoney
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1101
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[9e]"></a>ParaGetFeilvTime</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, para.o(i.ParaGetFeilvTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ParaGetFeilvTime
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPeriodMoney
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1101
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[d8]"></a>ParaGetGateWay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, para.o(i.ParaGetGateWay))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
</UL>

<P><STRONG><a name="[cc]"></a>ParaGetHardVersion</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, para.o(i.ParaGetHardVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParaGetHardVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[e0]"></a>ParaGetLifeTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, para.o(i.ParaGetLifeTime))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[131]"></a>ParaGetLimitHour</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.ParaGetLimitHour))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartDeviceInfo
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeLifeTime
</UL>

<P><STRONG><a name="[d6]"></a>ParaGetLocalIp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, para.o(i.ParaGetLocalIp))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
</UL>

<P><STRONG><a name="[201]"></a>ParaGetLoginTimeInterval</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, para.o(i.ParaGetLoginTimeInterval))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
</UL>

<P><STRONG><a name="[de]"></a>ParaGetManufactureBase</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, para.o(i.ParaGetManufactureBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParaGetManufactureBase
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[dd]"></a>ParaGetManufactureDate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, para.o(i.ParaGetManufactureDate))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[1f6]"></a>ParaGetNetCommOverCnt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, para.o(i.ParaGetNetCommOverCnt))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
</UL>

<P><STRONG><a name="[ce]"></a>ParaGetNetHeartTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, para.o(i.ParaGetNetHeartTime))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
</UL>

<P><STRONG><a name="[d9]"></a>ParaGetPhyMac</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, para.o(i.ParaGetPhyMac))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
</UL>

<P><STRONG><a name="[cb]"></a>ParaGetPileNo</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, para.o(i.ParaGetPileNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ParaGetPileNo
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardPro
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD5
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigProtocolFrameCheck
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD8
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD102
</UL>

<P><STRONG><a name="[d2]"></a>ParaGetQRCode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, para.o(i.ParaGetQRCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ParaGetQRCode
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[132]"></a>ParaGetRunHour</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.ParaGetRunHour))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartDeviceInfo
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeLifeTime
</UL>

<P><STRONG><a name="[cf]"></a>ParaGetScreenTime</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, para.o(i.ParaGetScreenTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParaGetScreenTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[d4]"></a>ParaGetServerIp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, para.o(i.ParaGetServerIp))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
</UL>

<P><STRONG><a name="[d5]"></a>ParaGetServerPort</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, para.o(i.ParaGetServerPort))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
</UL>

<P><STRONG><a name="[1f8]"></a>ParaGetStateInfoReportPeriod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, para.o(i.ParaGetStateInfoReportPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[d7]"></a>ParaGetSubMask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, para.o(i.ParaGetSubMask))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
</UL>

<P><STRONG><a name="[df]"></a>ParaGetTestWorker</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, para.o(i.ParaGetTestWorker))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[d3]"></a>ParaGetUpChannel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.ParaGetUpChannel))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[1ec]"></a>ParaInit</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, para.o(i.ParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaInit &rArr; InitTrickleInfo &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaDefault
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTrickleInfo
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromErase
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInfoV2Def
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInfoDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>ParaSavaRunHour</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, para.o(i.ParaSavaRunHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSavaRunHour &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeLifeTime
</UL>

<P><STRONG><a name="[1f0]"></a>ParaSave</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, para.o(i.ParaSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetUpChannel
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetTestWorker
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetSubMask
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetStateInfoReportPeriod
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetServerPort
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetServerIp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetScreenTime
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetQRCode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetPileNo
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetPhyMac
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetNetHeartTime
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetNetCommOverCnt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetManufactureDate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetManufactureBase
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetLoginTimeInterval
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetLocalIp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetLifeTime
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetHardVersion
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetGateWay
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetFeilvTime
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetFeilvMoney
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDCMeterAddr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCustomerNumber
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetChgGunNumber
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAPNUser
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAPNPasswd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAPN
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetACMeterAddr
</UL>

<P><STRONG><a name="[f0]"></a>ParaSetACMeterAddr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, para.o(i.ParaSetACMeterAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaSetACMeterAddr &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[fc]"></a>ParaSetAPN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, para.o(i.ParaSetAPN))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetAPN &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[fe]"></a>ParaSetAPNPasswd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, para.o(i.ParaSetAPNPasswd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetAPNPasswd &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[fd]"></a>ParaSetAPNUser</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, para.o(i.ParaSetAPNUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetAPNUser &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[105]"></a>ParaSetActCode</STRONG> (Thumb, 178 bytes, Stack size 104 bytes, para.o(i.ParaSetActCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ParaSetActCode &rArr; Decryption &rArr; HexstrToDec
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decryption
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[ec]"></a>ParaSetChgGunNumber</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, para.o(i.ParaSetChgGunNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetChgGunNumber &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[f2]"></a>ParaSetCustomerNumber</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, para.o(i.ParaSetCustomerNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetCustomerNumber &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[f1]"></a>ParaSetDCMeterAddr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, para.o(i.ParaSetDCMeterAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaSetDCMeterAddr &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[100]"></a>ParaSetFeilvMoney</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, para.o(i.ParaSetFeilvMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaSetFeilvMoney &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1103
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[ff]"></a>ParaSetFeilvTime</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, para.o(i.ParaSetFeilvTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ParaSetFeilvTime &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1103
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[fa]"></a>ParaSetGateWay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, para.o(i.ParaSetGateWay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetGateWay &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[eb]"></a>ParaSetHardVersion</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, para.o(i.ParaSetHardVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetHardVersion &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[104]"></a>ParaSetLifeTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, para.o(i.ParaSetLifeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetLifeTime &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[f8]"></a>ParaSetLocalIp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, para.o(i.ParaSetLocalIp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetLocalIp &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[1f1]"></a>ParaSetLoginTimeInterval</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, para.o(i.ParaSetLoginTimeInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaSetLoginTimeInterval &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
</UL>

<P><STRONG><a name="[102]"></a>ParaSetManufactureBase</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, para.o(i.ParaSetManufactureBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetManufactureBase &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[101]"></a>ParaSetManufactureDate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, para.o(i.ParaSetManufactureDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetManufactureDate &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[1f2]"></a>ParaSetNetCommOverCnt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, para.o(i.ParaSetNetCommOverCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaSetNetCommOverCnt &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
</UL>

<P><STRONG><a name="[ee]"></a>ParaSetNetHeartTime</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, para.o(i.ParaSetNetHeartTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaSetNetHeartTime &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[fb]"></a>ParaSetPhyMac</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, para.o(i.ParaSetPhyMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetPhyMac &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[ea]"></a>ParaSetPileNo</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, para.o(i.ParaSetPileNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaSetPileNo &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[f4]"></a>ParaSetQRCode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, para.o(i.ParaSetQRCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaSetQRCode &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[ef]"></a>ParaSetScreenTime</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, para.o(i.ParaSetScreenTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ParaSetScreenTime &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[f6]"></a>ParaSetServerIp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, para.o(i.ParaSetServerIp))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = ParaSetServerIp &rArr; DeleteAllRecord &rArr; f_mkfs &rArr; disk_initialize &rArr; MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAllRecord
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[f7]"></a>ParaSetServerPort</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, para.o(i.ParaSetServerPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaSetServerPort &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[1f3]"></a>ParaSetStateInfoReportPeriod</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, para.o(i.ParaSetStateInfoReportPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ParaSetStateInfoReportPeriod &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
</UL>

<P><STRONG><a name="[f9]"></a>ParaSetSubMask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, para.o(i.ParaSetSubMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetSubMask &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[103]"></a>ParaSetTestWorker</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, para.o(i.ParaSetTestWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetTestWorker &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[f5]"></a>ParaSetUpChannel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, para.o(i.ParaSetUpChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ParaSetUpChannel &rArr; ParaSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSave
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[143]"></a>RS485Flush</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rs485.o(i.RS485Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmSenddRv
</UL>

<P><STRONG><a name="[146]"></a>RS485Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rs485.o(i.RS485Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485Init &rArr; UartInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmTask
</UL>

<P><STRONG><a name="[145]"></a>RS485Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rs485.o(i.RS485Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RS485Read &rArr; UartRead
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmSenddRv
</UL>

<P><STRONG><a name="[144]"></a>RS485Write</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rs485.o(i.RS485Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = RS485Write &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmSenddRv
</UL>

<P><STRONG><a name="[1ac]"></a>ReadBE32U</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.ReadBE32U))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
</UL>

<P><STRONG><a name="[e6]"></a>ReadMaxcurrent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ext_chgtask.o(i.ReadMaxcurrent))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[e4]"></a>ReadModuletype</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ext_chgtask.o(i.ReadModuletype))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[e5]"></a>ReadMoudlenum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ext_chgtask.o(i.ReadMoudlenum))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[e7]"></a>ReadPowerMod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ext_chgtask.o(i.ReadPowerMod))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[1ff]"></a>RecordInit</STRONG> (Thumb, 146 bytes, Stack size 4168 bytes, record.o(i.RecordInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8756 + Unknown Stack Size
<LI>Call Chain = RecordInit &rArr; ChargingRecordInit &rArr; InsertChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardRecordInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingRecordInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecordInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>RecvCMD1011</STRONG> (Thumb, 148 bytes, Stack size 1024 bytes, protocol.o(i.RecvCMD1011))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = RecvCMD1011 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpdataFlag
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[90]"></a>RelayInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, relay.o(i.RelayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RelayInit &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[92]"></a>RtcInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtc.o(i.RtcInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[cd]"></a>RtcRead</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtc.o(i.RtcRead))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
</UL>

<P><STRONG><a name="[ed]"></a>RtcWrite</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtc.o(i.RtcWrite))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[21c]"></a>SPI_Flash_PP</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, serial_flash.o(i.SPI_Flash_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI_Flash_PP &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteByte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialflash_disk_write
</UL>

<P><STRONG><a name="[21d]"></a>SPI_Flash_RDSR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial_flash.o(i.SPI_Flash_RDSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_Flash_RDSR &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteByte
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadByte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitBusy
</UL>

<P><STRONG><a name="[21e]"></a>SPI_Flash_READ</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, serial_flash.o(i.SPI_Flash_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI_Flash_READ &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteByte
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadByte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialflash_disk_read
</UL>

<P><STRONG><a name="[21f]"></a>SPI_Flash_SE</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, serial_flash.o(i.SPI_Flash_SE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_Flash_SE &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteByte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialflash_disk_write
</UL>

<P><STRONG><a name="[220]"></a>SPI_Flash_WREN</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial_flash.o(i.SPI_Flash_WREN))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_Flash_WREN &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteByte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialflash_disk_write
</UL>

<P><STRONG><a name="[221]"></a>SPI_Flash_WRSR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial_flash.o(i.SPI_Flash_WRSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_Flash_WRSR &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteByte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialflash_disk_write
</UL>

<P><STRONG><a name="[1ef]"></a>SaveInfoDefault</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, para.o(i.SaveInfoDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SaveInfoDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
</UL>

<P><STRONG><a name="[1ed]"></a>SaveInfoV2Def</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, para.o(i.SaveInfoV2Def))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
</UL>

<P><STRONG><a name="[c1]"></a>SendPF30</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ext_chgtask.o(i.SendPF30))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SendPF30 &rArr; SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToCCB
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgHandle
</UL>

<P><STRONG><a name="[72]"></a>SendPF31</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ext_chgtask.o(i.SendPF31))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SendPF31 &rArr; SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToCCB
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromCCB
</UL>

<P><STRONG><a name="[c0]"></a>SendPF32</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ext_chgtask.o(i.SendPF32))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SendPF32 &rArr; SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToCCB
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgHandle
</UL>

<P><STRONG><a name="[73]"></a>SendPF33</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ext_chgtask.o(i.SendPF33))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SendPF33 &rArr; SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToCCB
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromCCB
</UL>

<P><STRONG><a name="[c2]"></a>SendPF35</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ext_chgtask.o(i.SendPF35))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SendPF35 &rArr; MultiFramePackAndSend &rArr; SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetVolA
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetCurA
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiFramePackAndSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgHandle
</UL>

<P><STRONG><a name="[1fb]"></a>SetMainCharge</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, maintask.o(i.SetMainCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetMainCharge
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[bd]"></a>SetParaCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.SetParaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgHandle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPara
</UL>

<P><STRONG><a name="[74]"></a>SetParaResult</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, para.o(i.SetParaResult))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromCCB
</UL>

<P><STRONG><a name="[193]"></a>SetRelayState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, relay.o(i.SetRelayState))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetRelayState &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
</UL>

<P><STRONG><a name="[106]"></a>SetTrickleCur</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, para.o(i.SetTrickleCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SetTrickleCur &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[215]"></a>SetTrickleInfo</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, para.o(i.SetTrickleInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SetTrickleInfo &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD601
</UL>

<P><STRONG><a name="[107]"></a>SetTrickleSoc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, para.o(i.SetTrickleSoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SetTrickleSoc &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
</UL>

<P><STRONG><a name="[1b2]"></a>SetUpdataFlag</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, para.o(i.SetUpdataFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SetUpdataFlag &rArr; CfgSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgSave
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1011
</UL>

<P><STRONG><a name="[97]"></a>SpiInit</STRONG> (Thumb, 382 bytes, Stack size 0 bytes, spi.o(i.SpiInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
</UL>

<P><STRONG><a name="[160]"></a>SpiReadByte</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, spi.o(i.SpiReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecvByte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_READ
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_RDSR
</UL>

<P><STRONG><a name="[15f]"></a>SpiWriteByte</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, spi.o(i.SpiWriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WRSR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WREN
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SE
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_READ
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_RDSR
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PP
</UL>

<P><STRONG><a name="[1e8]"></a>StartCharge</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, chginterface.o(i.StartCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = StartCharge &rArr; EXT_StartCharge &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_StartCharge
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[1ea]"></a>StopCharge</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chginterface.o(i.StopCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = StopCharge &rArr; EXT_StopCharge &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_StopCharge
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_cpu_c.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>SystemInit</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, system_lpc177x_8x.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[11]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(i.TIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TaskProtocolHandle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, protocol.o(i.TaskProtocolHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4844 + Unknown Stack Size
<LI>Call Chain = TaskProtocolHandle &rArr; ProtocolHandle &rArr; ReportChargeRecord &rArr; FindChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[8d]"></a>TimerInit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, timer.o(i.TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[6d]"></a>TimerRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.TimerRead))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgFeed
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyOnlineCardInfo
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdataPre
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBoardControl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardRunLedControl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockCardPro
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrickleCtrl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardPro
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeLifeTime
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUserInputChargeTypeAndAssistPowerType
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1009
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1007
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1005
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1003
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1001
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountQueryReport
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmSenddRv
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmProc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_StopCharge
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgHandle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportChargeRecord
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCon_
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>

<P><STRONG><a name="[15]"></a>UART0_IRQHandler</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, uart.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART1_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, uart.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART2_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, uart.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART3_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, uart.o(i.UART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART4_IRQHandler</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>UDPSend</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ethernet.o(i.UDPSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UDPSend &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
</UL>

<P><STRONG><a name="[28]"></a>USB_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.USB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>UartFlush</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(i.UartFlush))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Flush
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSenddRv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSInit
</UL>

<P><STRONG><a name="[8c]"></a>UartInit</STRONG> (Thumb, 562 bytes, Stack size 16 bytes, uart.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartInit
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DwinInit
</UL>

<P><STRONG><a name="[76]"></a>UartRead</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, uart.o(i.UartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UartRead
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchInfo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromDebugPlatform
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Read
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSenddRv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
</UL>

<P><STRONG><a name="[e8]"></a>UartWrite</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, uart.o(i.UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRDClearInput
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformWriteDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPlatformReadDataAnalyse
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Draw_Ioc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSenddRv
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
</UL>

<P><STRONG><a name="[23d]"></a>UpdateMoneyJudge</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, protocol.o(i.UpdateMoneyJudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UpdateMoneyJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
</UL>

<P><STRONG><a name="[16c]"></a>VerifyOnlineCardInfo</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, protocol.o(i.VerifyOnlineCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = VerifyOnlineCardInfo &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnlineCardInfo
</UL>

<P><STRONG><a name="[81]"></a>WIZCHIP_READ</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, w5500.o(i.WIZCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>

<P><STRONG><a name="[283]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, w5500.o(i.WIZCHIP_READ_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
</UL>

<P><STRONG><a name="[82]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, w5500.o(i.WIZCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
</UL>

<P><STRONG><a name="[24f]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, w5500.o(i.WIZCHIP_WRITE_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
</UL>

<P><STRONG><a name="[242]"></a>WaitBusy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, serial_flash.o(i.WaitBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WaitBusy &rArr; SPI_Flash_RDSR &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_RDSR
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialflash_disk_write
</UL>

<P><STRONG><a name="[1b6]"></a>WdgFeed</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wdg.o(i.WdgFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WdgFeed &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[157]"></a>WriteBE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.WriteBE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[156]"></a>WriteBE32U</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.WriteBE32U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[17f]"></a>WriteLE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.WriteLE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>

<P><STRONG><a name="[155]"></a>WriteLE32U</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.WriteLE32U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[176]"></a>XRDClearInput</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, xrd.o(i.XRDClearInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = XRDClearInput &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUserInputChargeTypeAndAssistPowerType
</UL>

<P><STRONG><a name="[116]"></a>XRD_Draw_Ioc</STRONG> (Thumb, 64 bytes, Stack size 288 bytes, xrd.o(i.XRD_Draw_Ioc))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = XRD_Draw_Ioc &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBIdleInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleInfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBStopInfo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBIdleInfo
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBChgInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBIdleInfo
</UL>

<P><STRONG><a name="[113]"></a>XRD_Load_Page</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, xrd.o(i.XRD_Load_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = XRD_Load_Page &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVerifySuccesInfo
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVerifyFailure
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUpdataInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUnLockFailureInfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartFailureInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartDeviceInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartChgInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRemainMoneyInfo
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordMoreInfo
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperationInfo
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNoPileUsed
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInsertGunInfo
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInVerify
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDeviceFault
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCardLockInfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAccount
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopInfo
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBStopInfo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBIdleInfo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBChgInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleInfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBStopInfo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBIdleInfo
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBChgInfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBStopInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBIdleInfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBChgInfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChargeInfo
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUserInputChargeTypeAndAssistPowerType
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMoreChargingInfo
</UL>

<P><STRONG><a name="[112]"></a>XRD_Write_Addr</STRONG> (Thumb, 148 bytes, Stack size 296 bytes, xrd.o(i.XRD_Write_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVerifySuccesInfo
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVerifyFailure
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUpdataInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUnLockFailureInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartDeviceInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRemainMoneyInfo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordNullInfo
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordMoreInfo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordInfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuInfo
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrIdGunInfo
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDeviceFault
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCardLockInfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAccount
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopInfo
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBStopInfo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBIdleInfo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBChgInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleInfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBStopInfo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBIdleInfo
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBChgInfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBStopInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBIdleInfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBChgInfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChargeInfo
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUserInputChargeTypeAndAssistPowerType
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMoreChargingInfo
</UL>

<P><STRONG><a name="[243]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[294]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[a1]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChargeRecord
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVerifySuccesInfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUpdataInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUnLockFailureInfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartDeviceInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartChgInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRemainMoneyInfo
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordMoreInfo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordInfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAccount
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopInfo
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBStopInfo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBIdleInfo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBChgInfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBStopInfo
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBChgInfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBStopInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBIdleInfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBChgInfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChargeInfo
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeErrInfo
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUserInputChargeTypeAndAssistPowerType
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnlineCardInfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMoreChargingInfo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcKey
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetPileNo
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsProc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCon_
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[295]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[296]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[297]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[298]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[205]"></a>begin_update</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, iap.o(i.begin_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = begin_update &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectorPrepare
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1001
</UL>

<P><STRONG><a name="[14a]"></a>close</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, socket.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>

<P><STRONG><a name="[26f]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[14c]"></a>connect</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, socket.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = connect &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>

<P><STRONG><a name="[152]"></a>ctlnetwork</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wizchip_conf.o(i.ctlnetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctlnetwork &rArr; wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
</UL>

<P><STRONG><a name="[80]"></a>ctlwizchip</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, wizchip_conf.o(i.ctlwizchip))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>

<P><STRONG><a name="[27f]"></a>dataCompare</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iap.o(i.dataCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dataCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_update
</UL>

<P><STRONG><a name="[24d]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = disk_initialize &rArr; MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[24e]"></a>disk_ioctl</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[24a]"></a>disk_read</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = disk_read &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialflash_disk_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[24c]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[273]"></a>disk_write</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialflash_disk_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[20b]"></a>end_update</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, iap.o(i.end_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = end_update &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectorPrepare
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectorErase
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramToFlash
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1009
</UL>

<P><STRONG><a name="[15b]"></a>f_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChargeRecord
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInit
</UL>

<P><STRONG><a name="[10e]"></a>f_mkfs</STRONG> (Thumb, 1616 bytes, Stack size 104 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = f_mkfs &rArr; disk_initialize &rArr; MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAllRecord
</UL>

<P><STRONG><a name="[10d]"></a>f_mount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(i.f_mount))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteAllRecord
</UL>

<P><STRONG><a name="[159]"></a>f_open</STRONG> (Thumb, 350 bytes, Stack size 80 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChargeRecord
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInit
</UL>

<P><STRONG><a name="[15a]"></a>f_read</STRONG> (Thumb, 506 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChargeRecord
</UL>

<P><STRONG><a name="[276]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[184]"></a>f_write</STRONG> (Thumb, 572 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
</UL>

<P><STRONG><a name="[83]"></a>getSn_RX_RSR</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, w5500.o(i.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_RX_RSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>

<P><STRONG><a name="[27e]"></a>getSn_TX_FSR</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, w5500.o(i.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_TX_FSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[251]"></a>get_fat</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[277]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[39]"></a>main</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8788 + Unknown Stack Size
<LI>Call Chain = main &rArr; RecordInit &rArr; ChargingRecordInit &rArr; InsertChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ae]"></a>print</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, uart.o(i.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmTask
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD601
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD5
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1103
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1101
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1009
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1007
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1005
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1003
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1001
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmReadData
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1011
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD8
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD702
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD604
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD602
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD102
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD701
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCon_
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthConn
</UL>

<P><STRONG><a name="[203]"></a>printx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart.o(i.printx))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD5
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1103
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1101
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1009
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1007
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1005
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1003
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1001
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1011
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD8
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD702
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD604
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD602
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD102
</UL>

<P><STRONG><a name="[209]"></a>process_update</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, iap.o(i.process_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = process_update &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectorPrepare
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramToFlash
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataCompare
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1007
</UL>

<P><STRONG><a name="[252]"></a>put_fat</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[275]"></a>ramToFlash</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, iap.o(i.ramToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ramToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_update
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_update
</UL>

<P><STRONG><a name="[14e]"></a>recv</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, socket.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>

<P><STRONG><a name="[84]"></a>recvfrom</STRONG> (Thumb, 606 bytes, Stack size 40 bytes, socket.o(i.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = recvfrom &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
</UL>

<P><STRONG><a name="[151]"></a>reg_wizchip_cris_cbfunc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_cris_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
</UL>

<P><STRONG><a name="[14f]"></a>reg_wizchip_cs_cbfunc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_cs_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
</UL>

<P><STRONG><a name="[150]"></a>reg_wizchip_spi_cbfunc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_spi_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthInit
</UL>

<P><STRONG><a name="[248]"></a>sectorErase</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iap.o(i.sectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_update
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_update
</UL>

<P><STRONG><a name="[247]"></a>sectorPrepare</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, iap.o(i.sectorPrepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sectorPrepare
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_update
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_update
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_update
</UL>

<P><STRONG><a name="[14d]"></a>send</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, socket.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>

<P><STRONG><a name="[23a]"></a>sendto</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, socket.o(i.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSend
</UL>

<P><STRONG><a name="[272]"></a>serialflash_disk_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, serial_flash.o(i.serialflash_disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = serialflash_disk_read &rArr; SPI_Flash_READ &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[274]"></a>serialflash_disk_write</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, serial_flash.o(i.serialflash_disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = serialflash_disk_write &rArr; SPI_Flash_PP &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitBusy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WRSR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WREN
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_SE
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[85]"></a>socket</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, socket.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = socket &rArr; close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromUdpPlatform
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthHandle
</UL>

<P><STRONG><a name="[65]"></a>sysTickInit</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, os_cpu_c.o(i.sysTickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysTickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[12b]"></a>u32tobcdnomstr1</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, myalglib.o(i.u32tobcdnomstr1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = u32tobcdnomstr1 &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordMoreInfo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordInfo
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
</UL>

<P><STRONG><a name="[280]"></a>wiz_recv_data</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, w5500.o(i.wiz_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[281]"></a>wiz_recv_ignore</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, w5500.o(i.wiz_recv_ignore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wiz_recv_ignore &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[282]"></a>wiz_send_data</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, w5500.o(i.wiz_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[4]"></a>wizchip_bus_readdata</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_bus_readdata))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>wizchip_bus_writedata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_bus_writedata))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[25e]"></a>wizchip_clrinterrupt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_clrinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_clrinterrupt &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[0]"></a>wizchip_cris_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cris_enter))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.data)
<LI> wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
</UL>
<P><STRONG><a name="[1]"></a>wizchip_cris_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cris_exit))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.data)
<LI> wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
</UL>
<P><STRONG><a name="[3]"></a>wizchip_cs_deselect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cs_deselect))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.data)
<LI> wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
</UL>
<P><STRONG><a name="[2]"></a>wizchip_cs_select</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cs_select))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.data)
<LI> wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
</UL>
<P><STRONG><a name="[25f]"></a>wizchip_getinterrupt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_getinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getinterrupt &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[261]"></a>wizchip_getinterruptmask</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_getinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getinterruptmask &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[257]"></a>wizchip_getnetinfo</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_getnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getnetinfo &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[259]"></a>wizchip_getnetmode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_getnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_getnetmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[25b]"></a>wizchip_gettimeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_gettimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_gettimeout &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[25d]"></a>wizchip_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, wizchip_conf.o(i.wizchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[260]"></a>wizchip_setinterruptmask</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_setinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setinterruptmask &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[256]"></a>wizchip_setnetinfo</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_setnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setnetinfo &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[258]"></a>wizchip_setnetmode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_setnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[25a]"></a>wizchip_settimeout</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_settimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_settimeout &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[4f]"></a>wizchip_spi_readbyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_spi_readbyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[50]"></a>wizchip_spi_writebyte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_spi_writebyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[25c]"></a>wizchip_sw_reset</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, wizchip_conf.o(i.wizchip_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
</UL>

<P><STRONG><a name="[264]"></a>wizphy_getphyconf</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizphy_getphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_getphyconf &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[267]"></a>wizphy_getphylink</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_getphylink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_getphylink &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[266]"></a>wizphy_getphypmode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_getphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_getphypmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[262]"></a>wizphy_reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
</UL>

<P><STRONG><a name="[263]"></a>wizphy_setphyconf</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizphy_setphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_setphyconf &rArr; wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[265]"></a>wizphy_setphypmode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizphy_setphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_setphypmode &rArr; wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[86]"></a>Beep</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, maintask.o(i.Beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Beep &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOn
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnlineCardInfo
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[9d]"></a>CalPeriodMoney</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, maintask.o(i.CalPeriodMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CalPeriodMoney &rArr; ParaGetFeilvTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetFeilvTime
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetFeilvMoney
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
</UL>

<P><STRONG><a name="[c7]"></a>ConditionStop</STRONG> (Thumb, 434 bytes, Stack size 16 bytes, maintask.o(i.ConditionStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConditionStop &rArr; TrickleCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetCommState
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrickleCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[127]"></a>DispMoreChargingInfo</STRONG> (Thumb, 572 bytes, Stack size 152 bytes, maintask.o(i.DispMoreChargingInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = DispMoreChargingInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[16b]"></a>GetOnlineCardInfo</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, maintask.o(i.GetOnlineCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = GetOnlineCardInfo &rArr; DispVerifyFailure &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyOnlineCardInfo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVerifyFailure
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInVerify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[175]"></a>GetUserInputChargeTypeAndAssistPowerType</STRONG> (Thumb, 562 bytes, Stack size 112 bytes, maintask.o(i.GetUserInputChargeTypeAndAssistPowerType))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = GetUserInputChargeTypeAndAssistPowerType &rArr; GetTouchInfo &rArr; UartRead
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRDClearInput
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchInfo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
</UL>

<P><STRONG><a name="[181]"></a>InitStartChgDate</STRONG> (Thumb, 1076 bytes, Stack size 48 bytes, maintask.o(i.InitStartChgDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = InitStartChgDate &rArr; GetUserInputChargeTypeAndAssistPowerType &rArr; GetTouchInfo &rArr; UartRead
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetTotalElc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVerifySuccesInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRemainMoneyInfo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUserInputChargeTypeAndAssistPowerType
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[18c]"></a>JudgeErrInfo</STRONG> (Thumb, 230 bytes, Stack size 88 bytes, maintask.o(i.JudgeErrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = JudgeErrInfo &rArr; DispErrIdGunInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetCommState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrIdGunInfo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
</UL>

<P><STRONG><a name="[18d]"></a>JudgeLifeTime</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, maintask.o(i.JudgeLifeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = JudgeLifeTime &rArr; ParaSavaRunHour &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSavaRunHour
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetRunHour
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetLimitHour
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[19a]"></a>LockCardPro</STRONG> (Thumb, 178 bytes, Stack size 104 bytes, maintask.o(i.LockCardPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = LockCardPro &rArr; DispOperationInfo &rArr; XRD_Load_Page &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLockCardRecord
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperationInfo
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSetPileNumberAndLock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[19c]"></a>LockedCardHandle</STRONG> (Thumb, 356 bytes, Stack size 560 bytes, maintask.o(i.LockedCardHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 5124 + Unknown Stack Size
<LI>Call Chain = LockedCardHandle &rArr; FindChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecordIndex
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLockCardRecord
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChargeRecord
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUnLockFailureInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCardLockInfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAccount
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLockCardRecord
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetPileNumber
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockCardPro
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[1b4]"></a>OneGunHandle</STRONG> (Thumb, 2742 bytes, Stack size 752 bytes, maintask.o(i.OneGunHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 5876 + Unknown Stack Size
<LI>Call Chain = OneGunHandle &rArr; LockedCardHandle &rArr; FindChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharge
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharge
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetQRCode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargingRecord
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdataPre
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchInfo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStopCause
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChgInfo
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetCommState
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUpdataInfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartFailureInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartChgInfo
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNoPileUsed
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInsertGunInfo
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDeviceFault
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAccount
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleInfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChargeInfo
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLockCardRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChargingRecord
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetType
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetState
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetMoney
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetLockState
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetId
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockCardPro
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDState
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardPro
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeLifeTime
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnlineCardInfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMoreChargingInfo
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConditionStop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[1e6]"></a>SetLEDState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, maintask.o(i.SetLEDState))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[1e5]"></a>ShowMenu</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, maintask.o(i.ShowMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = ShowMenu &rArr; DispMenuInfo &rArr; XRD_Write_Addr &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRead
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnlineState
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuInfo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[1e7]"></a>ShowRec</STRONG> (Thumb, 970 bytes, Stack size 392 bytes, maintask.o(i.ShowRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4956 + Unknown Stack Size
<LI>Call Chain = ShowRec &rArr; FindChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Write_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRD_Load_Page
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XRDClearInput
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchInfo
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecordNumber
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecordIndex
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChargeRecord
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordNullInfo
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordMoreInfo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRecordInfo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[c9]"></a>TrickleCtrl</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, maintask.o(i.TrickleCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TrickleCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleSoc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleMin
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleCur
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConditionStop
</UL>

<P><STRONG><a name="[1b5]"></a>TwoGunHandle</STRONG> (Thumb, 13466 bytes, Stack size 344 bytes, maintask.o(i.TwoGunHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 5468 + Unknown Stack Size
<LI>Call Chain = TwoGunHandle &rArr; LockedCardHandle &rArr; FindChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharge
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharge
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargingRecord
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargeRecord
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdataPre
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchInfo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStopCause
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChgInfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispUpdataInfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartFailureInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStartChgInfo
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNoPileUsed
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInsertGunInfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAccount
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBStopInfo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBIdleInfo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAStopBChgInfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBStopInfo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBIdleInfo
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAIdleBChgInfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBStopInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBIdleInfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAChgBChgInfo
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteLockCardRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteChargingRecord
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetType
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetState
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetMoney
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetLockState
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardGetId
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateChargeData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockCardPro
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRec
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDState
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCardPro
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeLifeTime
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeErrInfo
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStartChgDate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOnlineCardInfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMoreChargingInfo
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConditionStop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[1a0]"></a>UnLockCardPro</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, maintask.o(i.UnLockCardPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = UnLockCardPro &rArr; DispOperationInfo &rArr; XRD_Load_Page &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperationInfo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardSetMoneyAndUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockedCardHandle
</UL>

<P><STRONG><a name="[1e9]"></a>UpdateChargeData</STRONG> (Thumb, 922 bytes, Stack size 56 bytes, maintask.o(i.UpdateChargeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = UpdateChargeData &rArr; InsertChargingRecord &rArr; OSMutexPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMoneyJudge
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRead
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertChargingRecord
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetVolC
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetVolB
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetVolA
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetTotalElc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetCurC
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetCurB
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetCurA
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPeriodMoney
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoGunHandle
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneGunHandle
</UL>

<P><STRONG><a name="[b0]"></a>CfgSave</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, para.o(i.CfgSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CfgSave &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpdataFlag
</UL>

<P><STRONG><a name="[183]"></a>InitTrickleInfo</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, para.o(i.InitTrickleInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitTrickleInfo &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
</UL>

<P><STRONG><a name="[1eb]"></a>ParaDefault</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, para.o(i.ParaDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ParaDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
</UL>

<P><STRONG><a name="[a6]"></a>CardProc</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, cardtask.o(i.CardProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = CardProc &rArr; MTWrite &rArr; MTSenddRv &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTWrite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSearch
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTRead
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcKey
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetCustomerNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTask
</UL>

<P><STRONG><a name="[13a]"></a>ElmCheckMsg</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, elmtask.o(i.ElmCheckMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ElmCheckMsg &rArr; MyCum8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCum8Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmSenddRv
</UL>

<P><STRONG><a name="[13c]"></a>ElmMakeMsg</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, elmtask.o(i.ElmMakeMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ElmMakeMsg &rArr; MyCum8Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCum8Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmRead
</UL>

<P><STRONG><a name="[13d]"></a>ElmProc</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, elmtask.o(i.ElmProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = ElmProc &rArr; ElmReadData &rArr; ElmRead &rArr; ElmSenddRv &rArr; RS485Write &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmReadData
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetDCMeterAddr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmTask
</UL>

<P><STRONG><a name="[13e]"></a>ElmReadData</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, elmtask.o(i.ElmReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = ElmReadData &rArr; ElmRead &rArr; ElmSenddRv &rArr; RS485Write &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmProc
</UL>

<P><STRONG><a name="[140]"></a>ElmSenddRv</STRONG> (Thumb, 144 bytes, Stack size 264 bytes, elmtask.o(i.ElmSenddRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = ElmSenddRv &rArr; RS485Write &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Flush
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmCheckMsg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmRead
</UL>

<P><STRONG><a name="[6c]"></a>AccountQueryReport</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, protocol.o(i.AccountQueryReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308 + Unknown Stack Size
<LI>Call Chain = AccountQueryReport &rArr; SendCMD204 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[7b]"></a>AnalyseMsgFromMSA</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, protocol.o(i.AnalyseMsgFromMSA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1572 + Unknown Stack Size
<LI>Call Chain = AnalyseMsgFromMSA &rArr; UnpackMsg &rArr; RecvCMD3 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameFormatCheck
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRecv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[b2]"></a>ChangeStatus</STRONG> (Thumb, 172 bytes, Stack size 152 bytes, protocol.o(i.ChangeStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ChangeStatus &rArr; GetChgInfo &rArr; GetEXT_CCBInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChgInfo
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[7d]"></a>FrameFormatCheck</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, protocol.o(i.FrameFormatCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FrameFormatCheck &rArr; addChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromMSA
</UL>

<P><STRONG><a name="[18f]"></a>JudgeSendCMD702</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, protocol.o(i.JudgeSendCMD702))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172 + Unknown Stack Size
<LI>Call Chain = JudgeSendCMD702 &rArr; SendCMD702 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainCharge
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD702
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[20d]"></a>NVIC_SystemReset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, protocol.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD5
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1011
</UL>

<P><STRONG><a name="[1f4]"></a>ProtocolHandle</STRONG> (Thumb, 1280 bytes, Stack size 32 bytes, protocol.o(i.ProtocolHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4844 + Unknown Stack Size
<LI>Call Chain = ProtocolHandle &rArr; ReportChargeRecord &rArr; FindChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMainCharge
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainCharge
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSendCMD702
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeStatus
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromMSA
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountQueryReport
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetStateInfoReportPeriod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetServerPort
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetServerIp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetNetHeartTime
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetNetCommOverCnt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConn
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD8
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD102
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportChargeRecord
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskProtocolHandle
</UL>

<P><STRONG><a name="[1fd]"></a>ProtocolInit</STRONG> (Thumb, 210 bytes, Stack size 256 bytes, protocol.o(i.ProtocolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4820 + Unknown Stack Size
<LI>Call Chain = ProtocolInit &rArr; FindChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecordNumber
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecordIndex
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChargeRecord
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskProtocolHandle
</UL>

<P><STRONG><a name="[200]"></a>RecvCMD1</STRONG> (Thumb, 930 bytes, Stack size 1104 bytes, protocol.o(i.RecvCMD1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1364 + Unknown Stack Size
<LI>Call Chain = RecvCMD1 &rArr; ParaSetServerIp &rArr; DeleteAllRecord &rArr; f_mkfs &rArr; disk_initialize &rArr; MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetStateInfoReportPeriod
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetServerPort
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetServerIp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetNetHeartTime
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetNetCommOverCnt
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetLoginTimeInterval
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetStateInfoReportPeriod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetServerPort
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetServerIp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetNetHeartTime
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetNetCommOverCnt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetLoginTimeInterval
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[204]"></a>RecvCMD1001</STRONG> (Thumb, 272 bytes, Stack size 1048 bytes, protocol.o(i.RecvCMD1001))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172 + Unknown Stack Size
<LI>Call Chain = RecvCMD1001 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainCharge
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_update
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[206]"></a>RecvCMD1003</STRONG> (Thumb, 176 bytes, Stack size 1048 bytes, protocol.o(i.RecvCMD1003))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172 + Unknown Stack Size
<LI>Call Chain = RecvCMD1003 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[207]"></a>RecvCMD1005</STRONG> (Thumb, 202 bytes, Stack size 1048 bytes, protocol.o(i.RecvCMD1005))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172 + Unknown Stack Size
<LI>Call Chain = RecvCMD1005 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[208]"></a>RecvCMD1007</STRONG> (Thumb, 236 bytes, Stack size 1056 bytes, protocol.o(i.RecvCMD1007))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180 + Unknown Stack Size
<LI>Call Chain = RecvCMD1007 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_update
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[20a]"></a>RecvCMD1009</STRONG> (Thumb, 160 bytes, Stack size 1040 bytes, protocol.o(i.RecvCMD1009))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164 + Unknown Stack Size
<LI>Call Chain = RecvCMD1009 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_update
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[20e]"></a>RecvCMD1101</STRONG> (Thumb, 178 bytes, Stack size 1064 bytes, protocol.o(i.RecvCMD1101))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188 + Unknown Stack Size
<LI>Call Chain = RecvCMD1101 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetFeilvTime
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetFeilvMoney
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[20f]"></a>RecvCMD1103</STRONG> (Thumb, 290 bytes, Stack size 1064 bytes, protocol.o(i.RecvCMD1103))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188 + Unknown Stack Size
<LI>Call Chain = RecvCMD1103 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetFeilvTime
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetFeilvMoney
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[23c]"></a>RecvCMD203</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, protocol.o(i.RecvCMD203))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RecvCMD203
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[210]"></a>RecvCMD3</STRONG> (Thumb, 1586 bytes, Stack size 1408 bytes, protocol.o(i.RecvCMD3))
<BR><BR>[Stack]<UL><LI>Max Depth = 1532 + Unknown Stack Size
<LI>Call Chain = RecvCMD3 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex32ToBcd32
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd32ToHex32
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRead
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetQRCode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetQRCode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetPileNo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetACMeterAddr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetACMeterAddr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[213]"></a>RecvCMD5</STRONG> (Thumb, 336 bytes, Stack size 1088 bytes, protocol.o(i.RecvCMD5))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212 + Unknown Stack Size
<LI>Call Chain = RecvCMD5 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[214]"></a>RecvCMD601</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, protocol.o(i.RecvCMD601))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188 + Unknown Stack Size
<LI>Call Chain = RecvCMD601 &rArr; SendCMD602 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrickleInfo
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD602
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[217]"></a>RecvCMD603</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, protocol.o(i.RecvCMD603))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180 + Unknown Stack Size
<LI>Call Chain = RecvCMD603 &rArr; SendCMD604 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD604
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[219]"></a>RecvCMD7</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, protocol.o(i.RecvCMD7))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RecvCMD7
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[21a]"></a>RecvCMD701</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, protocol.o(i.RecvCMD701))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = RecvCMD701 &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackMsg
</UL>

<P><STRONG><a name="[1fa]"></a>ReportChargeRecord</STRONG> (Thumb, 848 bytes, Stack size 248 bytes, protocol.o(i.ReportChargeRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 4812 + Unknown Stack Size
<LI>Call Chain = ReportChargeRecord &rArr; FindChargeRecord &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecordNumber
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecordIndex
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindChargeRecord
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecord
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[1f7]"></a>SendCMD102</STRONG> (Thumb, 230 bytes, Stack size 1072 bytes, protocol.o(i.SendCMD102))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196 + Unknown Stack Size
<LI>Call Chain = SendCMD102 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[1f9]"></a>SendCMD104</STRONG> (Thumb, 1246 bytes, Stack size 1320 bytes, protocol.o(i.SendCMD104))
<BR><BR>[Stack]<UL><LI>Max Depth = 1444 + Unknown Stack Size
<LI>Call Chain = SendCMD104 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32tobcdnomstr1
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex32ToBcd32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChgInfo
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElmGetCommState
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSumTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSumMoney
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSumEnergy
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStopMeterEnergy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartingChg
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartType
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartPara
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartMode
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartMeterEnergy
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartDateTime
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartCardID
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainCharge
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLifeTime
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[1f5]"></a>SendCMD106</STRONG> (Thumb, 446 bytes, Stack size 1088 bytes, protocol.o(i.SendCMD106))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212 + Unknown Stack Size
<LI>Call Chain = SendCMD106 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex32ToBcd32
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargeRecordNumber
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetNetHeartTime
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetNetCommOverCnt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetLoginTimeInterval
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[21b]"></a>SendCMD202</STRONG> (Thumb, 720 bytes, Stack size 1288 bytes, protocol.o(i.SendCMD202))
<BR><BR>[Stack]<UL><LI>Max Depth = 1412 + Unknown Stack Size
<LI>Call Chain = SendCMD202 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32tobcdnomstr1
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex32ToBcd32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportChargeRecord
</UL>

<P><STRONG><a name="[6e]"></a>SendCMD204</STRONG> (Thumb, 362 bytes, Stack size 1176 bytes, protocol.o(i.SendCMD204))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300 + Unknown Stack Size
<LI>Call Chain = SendCMD204 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32tobcdnomstr1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccountQueryReport
</UL>

<P><STRONG><a name="[216]"></a>SendCMD602</STRONG> (Thumb, 184 bytes, Stack size 1040 bytes, protocol.o(i.SendCMD602))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164 + Unknown Stack Size
<LI>Call Chain = SendCMD602 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleSoc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleMin
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleCur
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD601
</UL>

<P><STRONG><a name="[218]"></a>SendCMD604</STRONG> (Thumb, 178 bytes, Stack size 1040 bytes, protocol.o(i.SendCMD604))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164 + Unknown Stack Size
<LI>Call Chain = SendCMD604 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleSoc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleMin
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrickleCur
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD603
</UL>

<P><STRONG><a name="[190]"></a>SendCMD702</STRONG> (Thumb, 330 bytes, Stack size 1040 bytes, protocol.o(i.SendCMD702))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164 + Unknown Stack Size
<LI>Call Chain = SendCMD702 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSendCMD702
</UL>

<P><STRONG><a name="[1fc]"></a>SendCMD8</STRONG> (Thumb, 222 bytes, Stack size 1080 bytes, protocol.o(i.SendCMD8))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204 + Unknown Stack Size
<LI>Call Chain = SendCMD8 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetPileNo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetChgGunNumber
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSend
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addChecksum
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolHandle
</UL>

<P><STRONG><a name="[7e]"></a>UnpackMsg</STRONG> (Thumb, 850 bytes, Stack size 16 bytes, protocol.o(i.UnpackMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1548 + Unknown Stack Size
<LI>Call Chain = UnpackMsg &rArr; RecvCMD3 &rArr; printx &rArr; print &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD7
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD603
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD601
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD5
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD203
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1103
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1101
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1009
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1007
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1005
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1003
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1001
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printx
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1011
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD701
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseMsgFromMSA
</UL>

<P><STRONG><a name="[161]"></a>addChecksum</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, protocol.o(i.addChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD5
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD3
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1103
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1101
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1009
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1007
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1005
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1003
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1001
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameFormatCheck
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvCMD1011
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD8
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD702
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD604
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD602
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD204
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD202
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD106
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD104
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCMD102
</UL>

<P><STRONG><a name="[9c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, can.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
</UL>

<P><STRONG><a name="[15c]"></a>FramDisable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fram.o(i.FramDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FramDisable &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramInit
</UL>

<P><STRONG><a name="[15d]"></a>FramEnable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fram.o(i.FramEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FramEnable &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
</UL>

<P><STRONG><a name="[15e]"></a>tdelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fram.o(i.tdelay))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
</UL>

<P><STRONG><a name="[23b]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[1ad]"></a>MTCheckMsg</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mt625.o(i.MTCheckMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MTCheckMsg &rArr; MyXorSum
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyXorSum
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSenddRv
</UL>

<P><STRONG><a name="[1af]"></a>MTMakeMsg</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, mt625.o(i.MTMakeMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MTMakeMsg &rArr; MyXorSum
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyXorSum
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTWrite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSearch
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTRead
</UL>

<P><STRONG><a name="[1b0]"></a>MTSenddRv</STRONG> (Thumb, 146 bytes, Stack size 256 bytes, mt625.o(i.MTSenddRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = MTSenddRv &rArr; UartWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTCheckMsg
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartFlush
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTWrite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTSearch
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTRead
</UL>

<P><STRONG><a name="[170]"></a>LcdReadbuf</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, xrd.o(i.LcdReadbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LcdReadbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchInfo
</UL>

<P><STRONG><a name="[171]"></a>RecoverLcdbuf</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, xrd.o(i.RecoverLcdbuf))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchInfo
</UL>

<P><STRONG><a name="[1c3]"></a>OS_InitEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c0]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c1]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c2]"></a>OS_InitTCBList</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c7]"></a>OS_InitTaskIdle</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c8]"></a>OS_InitTaskStat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[43]"></a>SPI_RecvByte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernet.o(i.SPI_RecvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_RecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.EthInit)
</UL>
<P><STRONG><a name="[42]"></a>SPI_SendByte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernet.o(i.SPI_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.EthInit)
</UL>
<P><STRONG><a name="[40]"></a>W5500_CS_Deselect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernet.o(i.W5500_CS_Deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = W5500_CS_Deselect &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.EthInit)
</UL>
<P><STRONG><a name="[41]"></a>W5500_CS_Select</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernet.o(i.W5500_CS_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = W5500_CS_Select &rArr; GpioSetLev
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetLev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(i.EthInit)
</UL>
<P><STRONG><a name="[163]"></a>GPRSReset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, gprs.o(i.GPRSReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = GPRSReset &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSInit
</UL>

<P><STRONG><a name="[165]"></a>GPRS_SendCmd</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, gprs.o(i.GPRS_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GPRS_SendCmd &rArr; GprsReadSocket &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsProc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCon_
</UL>

<P><STRONG><a name="[177]"></a>GprsCon_</STRONG> (Thumb, 420 bytes, Stack size 176 bytes, gprs.o(i.GprsCon_))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = GprsCon_ &rArr; GPRS_SendCmd &rArr; GprsReadSocket &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsProc
</UL>

<P><STRONG><a name="[167]"></a>GprsReadSocket</STRONG> (Thumb, 706 bytes, Stack size 88 bytes, gprs.o(i.GprsReadSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GprsReadSocket &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetServerPort
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaGetServerIp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recoverbuf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadbuf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsProc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
</UL>

<P><STRONG><a name="[179]"></a>GprsReadbuf</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, gprs.o(i.GprsReadbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GprsReadbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
</UL>

<P><STRONG><a name="[17a]"></a>Recoverbuf</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gprs.o(i.Recoverbuf))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
</UL>

<P><STRONG><a name="[166]"></a>mystrstr</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gprs.o(i.mystrstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mystrstr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadSocket
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SendCmd
</UL>

<P><STRONG><a name="[1b7]"></a>MultiFramePackAndSend</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, ext_chgtask.o(i.MultiFramePackAndSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MultiFramePackAndSend &rArr; SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToCCB
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF35
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPara
</UL>

<P><STRONG><a name="[1b8]"></a>SendDataToCCB</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ext_chgtask.o(i.SendDataToCCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF33
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF32
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF31
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPF30
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiFramePackAndSend
</UL>

<P><STRONG><a name="[be]"></a>SendPara</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ext_chgtask.o(i.SendPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SendPara &rArr; MultiFramePackAndSend &rArr; SendDataToCCB &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParaCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParaCmd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearParaCmd
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetPowerMode
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetMoudleNum
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetModuleType
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetMaxCurrent
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiFramePackAndSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgHandle
</UL>

<P><STRONG><a name="[249]"></a>check_fs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = check_fs &rArr; disk_read &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[255]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[24b]"></a>chk_mounted</STRONG> (Thumb, 964 bytes, Stack size 80 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = chk_mounted &rArr; check_fs &rArr; disk_read &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[250]"></a>create_chain</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[253]"></a>create_name</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[268]"></a>dir_alloc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[26c]"></a>dir_find</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[26b]"></a>dir_next</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[270]"></a>dir_register</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[269]"></a>dir_sdi</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[278]"></a>follow_path</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[279]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[26d]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[271]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[254]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[26a]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[27b]"></a>remove_chain</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[27a]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[27d]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[26e]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sync_window &rArr; disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[27c]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[c3]"></a>AddRoundKey</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, libaes.o(i.AddRoundKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[6b]"></a>Cipher</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, libaes.o(i.Cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRows
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_encrypt
</UL>

<P><STRONG><a name="[69]"></a>InvCipher</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, libaes.o(i.InvCipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_decrypt
</UL>

<P><STRONG><a name="[189]"></a>InvMixColumns</STRONG> (Thumb, 1208 bytes, Stack size 48 bytes, libaes.o(i.InvMixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[187]"></a>InvShiftRows</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, libaes.o(i.InvShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[188]"></a>InvSubBytes</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, libaes.o(i.InvSubBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InvSubBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSBoxInvert
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[68]"></a>KeyExpansion</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, libaes.o(i.KeyExpansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeyExpansion
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSBoxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_encrypt
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_decrypt
</UL>

<P><STRONG><a name="[c6]"></a>MixColumns</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, libaes.o(i.MixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[c5]"></a>ShiftRows</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, libaes.o(i.ShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[c4]"></a>SubBytes</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, libaes.o(i.SubBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SubBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSBoxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[18b]"></a>getSBoxInvert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libaes.o(i.getSBoxInvert))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
</UL>

<P><STRONG><a name="[191]"></a>getSBoxValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libaes.o(i.getSBoxValue))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>

<P><STRONG><a name="[18a]"></a>xtime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libaes.o(i.xtime))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
</UL>

<P><STRONG><a name="[244]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[246]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[245]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[48]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[3d]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
